Average Time Complexity --- Time= O(log(n)) (AVG) Space case  Recurssion O(log(n)) | Iteration O(1) space
                                  O(n) Worst Case (Only One Branch) Space case Recurssion O(n) | Iteration O(1) space
                            

class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        # Write your code here.
        # Do not edit the return statement of this method.
        while self is not None:
          if value >= self.value :
            if self.right is None:
              self.right = BST(value)
              break
            self = self.right
          else:
            if self.left is None:
              self.left = BST(value)
              break
            self = self.left
        return self

    def contains(self, value):
        while self is not None:
          if value == self.value:
            return True
          elif value > self.value :
            self = self.right
          else:
            self = self.left
        return False    

    def remove(self, value, parentNode=None):
        currentNode = self

        while currentNode is not None:
          if value > currentNode.value :
            parentNode = currentNode
            currentNode = currentNode.right
          elif value < currentNode.value :
            parentNode = currentNode
            currentNode = currentNode.left
          else:
            if currentNode.left is not None and currentNode.right is not None:
              #currentNode value is the smallest value in the right subtree
              currentNode.value = currentNode.right.getLeftMostNodeInRightSubTree()
              currentNode.right.remove(currentNode.value,currentNode)
            elif parentNode == None:
              if currentNode.left != None:
                currentNode.value = currentNode.left.value
                currentNode.right = currentNode.left.right
                currentNode.left = currentNode.left.left
              elif currentNode.right != None:
                currentNode.value = currentNode.right.value
                currentNode.left = currentNode.right.left
                currentNode.right = currentNode.right.right
              else:
                pass
            elif parentNode.left == currentNode:
              parentNode.left = currentNode.left if currentNode.left is not None else currentNode.right
            elif parentNode.right == currentNode:
              parentNode.right = currentNode.left if currentNode.left is not None else currentNode.right
            break
        return self

    def getLeftMostNodeInRightSubTree(self):
      currentNode = self
      while currentNode.left is not None:
        currentNode = currentNode.left
      return currentNode.value
