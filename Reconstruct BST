# This is an input class. Do not edit.
class BST:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

class TreeInfo:
    def __init__(self, rootIdx):
      self.rootIdx=rootIdx

def reconstructBst(preOrderTraversalValues):
    # Write your code here.
    treeInfo = TreeInfo(0)
    return constructBST(treeInfo,float('-inf'),float('inf'),preOrderTraversalValues)


def constructBST(treeInfo,minValue,maxValue,array):
  if treeInfo.rootIdx == len(array):
    return None

  element = array[treeInfo.rootIdx]
  if element < minValue or element >= maxValue:
    return None
  
  treeInfo.rootIdx += 1
  leftNode  = constructBST(treeInfo, minValue ,element ,array)
  rightNode = constructBST(treeInfo, element, maxValue ,array)
  return BST(element,leftNode,rightNode)
